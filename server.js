var SpotifyWebApi = require('spotify-web-api-node');
const express = require('express');
const socket = require('socket.io');
const path = require("path");
const app = express();


var credentials = {
    clientId: '59a34986442440bf8b14bdb6c954f17a',
    clientSecret: '970a4174e3514e9ab94bc19e65cc1a2b',
    redirectUri: 'http://192.168.1.13:3000/callback'
  };

var theManWhoSoldTheWorld = {
    "context_uri": "spotify:album:4h9rWFWhgCSSrvIEQ0YhYG",
    "offset": {
      "position": 7
    },
    "position_ms": 0
  }

spotifyApi = new SpotifyWebApi(credentials);

var scopes = ['user-modify-playback-state', 'user-read-email', 'user-read-private', 'user-read-birthdate', 'user-read-playback-state'],
    state;

var loggedIn = false;
var userId;
var playlistUri;
var playlistId;

app.get('/callback', function (req, res) {
    loggedIn = true;
    var code = req.query.code;

    spotifyApi.authorizationCodeGrant(code).then(
        function(data) {
          console.log('The token expires in ' + data.body['expires_in']);
          console.log('The access token is ' + data.body['access_token']);
          console.log('The refresh token is ' + data.body['refresh_token']);
      
          // Set the access token on the API object to use it in later calls
          spotifyApi.setAccessToken(data.body['access_token']);
          spotifyApi.setRefreshToken(data.body['refresh_token']);
          
          spotifyApi.getMe().then(
              function(me) {
                  userId = me.body.display_name;
                  console.log('Authenticated by ' + userId);

                  spotifyApi.getUserPlaylists(userId)
                    .then(function(playlists) {

                        var exists = false;
                        playlists.body.items.forEach(function(item) {
                            if(item.name == 'autogenerated3526') {
                                console.log('Playlist exists');
                                exists = true;
                                playlistUri = item.uri;
                                playlistId = item.id;

                                var positions = [];
                                for(var i = 0; i < item.tracks.total; i++) {
                                    positions.push(i);
                                }
                                spotifyApi.removeTracksFromPlaylistByPosition(item.id, positions, item.snapshot_id)
                                    .then(function(data) {
                                        console.log('Removed all tracks from existing playlist');
                                    }, function(err) {
                                        console.log('Something went wrong in removeTracksFromPlaylistByPosition()!', err);
                                    });
                            }
                        });

                        if(!exists) {
                            spotifyApi.createPlaylist(userId, 'autogenerated3526', { 'public': true }).then(
                                function(playlist) {
                
                                    console.log('Created New \'autogenerated3526\' Playlist');
                                    playlistUri = playlist.body.uri;
                                    playlistId = playlist.body.id;

                                }, function(err) {
                                    console.log('Something went wrong in createPlaylist()!', err);
                                });
                        }
                            
                    },function(err) {
                        console.log('Something went wrong in getUserPlaylists()!', err);
                    });
              }, function(err) {
                  console.log('Something went wrong in getMe()!', err);
              }
          )
          
          res.redirect('/');

        },
        function(err) {
          console.log('Something went wrong in authorizationCodeGrant()!', err);
        }
      );

      setInterval(
          function () {
            spotifyApi.getMyCurrentPlaybackState().then(
                function(data) {
                    io.sockets.emit('playing', data);
                }, function(err) {
                    console.log('Something went wrong in getMyCurrentPlaybackState()!', err);
                });
          }, 10000);
    
  })

app.get('/', function(req, res) {
    if(loggedIn) {
        res.sendFile(path.join(__dirname, 'website/loggedin', 'index.html'));
    } else {
        res.sendFile(path.join(__dirname, 'website/initial', 'index.html'));
    }
});

var server = app.listen(3000);

var firstTime = true;
var playlistSize = 0;

var io = socket(server);
io.on('connection', function(socket) {
    console.log('Connection established. Sending user data...');
    spotifyApi.getMe().then(
        function(data) {
            socket.emit('user', data);
        }, function(err) {
            console.log('Something went wrong in getMe()!', err);
        });

    spotifyApi.getMyCurrentPlaybackState().then(
        function(data) {
            socket.emit('playing', data);
        }, function(err) {
            console.log('Something went wrong in getMyCurrentPlaybackState()!', err);
        });

    //search bar
    socket.on('search', function(string) {
        spotifyApi.searchTracks(string, { limit: 30 }).then(
        function(data) {
            console.log('Search request for ' + string + ' ...');
            socket.emit('results', data);
        }, function(err) {
            console.log('Something went wrong in searchTracks()!', err);
        }
        )
    })

    //'Play' Button
    socket.on('request', function(track) {
        console.log('Request for ' + track.name + ' by ' + track.artist_name + ' ...');
        if(firstTime) {
            firstTime = false;
            spotifyApi.addTracksToPlaylist(playlistId, [track.uri])
                .then(function(data) {
                    playlistSize++;
                    
                    spotifyApi.play({context_uri: playlistUri}).then(
                        function(data) {
                        }, function(err) {
                            console.log('Something went wrong in play()!', err);
                    });

                }, function(err) {
                    console.log('Something went wrong in addTracksToPlaylist()!', err);
                });

        } else {
            spotifyApi.addTracksToPlaylist(playlistId, [track.uri])
                .then(function(data) {
                    playlistSize++;

                    spotifyApi.getMyCurrentPlaybackState().then(
                        function(playback) {
                            if(playback.body.context == null) {
                                spotifyApi.play({context_uri: playlistUri, "offset": { "position": playlistSize - 1 }}).then(
                                    function(data) {
                                    }, function(err) {
                                        console.log('Something went wrong in play()!', err);
                                });
                            }
                        }, function(err) {
                            console.log('Something went wrong in getMyCurrentPlaybackState()!', err);
                        });

                }, function(err) {
                    console.log('Something went wrongin addTracksToPlaylist()!', err);
                });
            
        }
            
        
    })
})